{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "inertia-data-actions",
  "type": "registry:component",
  "title": "Inertia Data Actions",
  "description": "A simple data actions component",
  "dependencies": [
    "@inertiajs/react"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "botio/registry/new-york/inertia/data-actions.tsx",
      "content": "import { Button } from \"@/components/ui/button\"\nimport { cn } from \"@/lib/utils\"\nimport { EyeIcon, Loader2Icon, PencilIcon, PlusIcon, RefreshCcw, Undo2Icon } from \"lucide-react\"\nimport { useState } from \"react\"\nimport { Link } from \"@inertiajs/react\"\n\ninterface DataCreateLinkProps {\n    children?: React.ReactNode\n    className?: string\n    href: string\n    disabled?: boolean\n    loading?: boolean\n}\n\nfunction DataCreateLink({\n    children,\n    className,\n    href,\n    disabled,\n    loading,\n}: DataCreateLinkProps) {\n    return (\n        <Button\n            asChild\n            className={cn(\"gap-1 flex-1 w-full md:w-auto\", className)}\n            disabled={disabled || loading}\n        >\n            <Link href={href}>\n                {loading ? (\n                    <Loader2Icon className=\"size-4 animate-spin\" />\n                ) : (\n                    <PlusIcon className=\"size-4.5\" />\n                )}\n                {children && <span className=\"hidden md:block\">{children}</span>}\n            </Link>\n        </Button>\n    )\n}\n\ninterface DataBackLinkProps {\n    href: string\n    label?: string\n    className?: string\n}\n\nfunction DataBackLink({ href, label = \"Volver\", className }: DataBackLinkProps) {\n    return (\n        <Button variant=\"secondary\" className={cn(\"w-full md:w-auto\", className)} asChild>\n            <Link href={href}>\n                <Undo2Icon className=\"size-4\" />\n                <span className=\"hidden md:block\">{label}</span>\n            </Link>\n        </Button>\n    )\n}\n\n\ninterface DataRefreshButtonProps {\n    className?: string\n    disabled?: boolean\n    loading?: boolean\n    isDropdownItem?: boolean\n    onClickRefresh?: () => void\n}\n\nfunction DataRefreshButton({\n    className,\n    disabled,\n    loading: controlledLoading,\n    isDropdownItem,\n    onClickRefresh\n}: DataRefreshButtonProps) {\n    const [internalLoading, setInternalLoading] = useState(false)\n    const loading = controlledLoading ?? internalLoading\n\n    const handleRefresh = () => {\n        onClickRefresh?.()\n        setInternalLoading(true)\n        setTimeout(() => {\n            window.location.href = window.location.pathname\n        }, 1000)\n    }\n\n    return (\n        <Button\n            type=\"button\"\n            variant=\"secondary\"\n            className={cn(\"gap-2\", className, isDropdownItem && \"justify-start bg-transparent hover:bg-accent\")}\n            onClick={() => handleRefresh()}\n            disabled={disabled || loading}\n        >\n            <RefreshCcw className={cn(\"size-4\", loading && \"animate-spin\")} />\n            {isDropdownItem && <span className=\"text-foreground\">Actualizar</span>}\n        </Button>\n    )\n}\n\ninterface DataShowLinkProps {\n    className?: string\n    href: string\n    label?: string\n    disabled?: boolean\n    loading?: boolean\n}\n\nfunction DataShowLink({ className, href, label, disabled, loading }: DataShowLinkProps) {\n    return (\n        <Button variant=\"ghost\" size=\"sm\" className={className} disabled={disabled || loading} asChild>\n            <Link href={href}>\n                <EyeIcon className=\"size-4\" />\n                {label && <span>{label}</span>}\n            </Link>\n        </Button>\n    )\n}\n\ninterface DataEditLinkProps {\n    className?: string\n    href: string\n    disabled?: boolean\n    loading?: boolean\n    suffix?: string\n}\n\nfunction DataEditLink({ className, href, disabled, loading, suffix }: DataEditLinkProps) {\n    return (\n        <Button variant=\"ghost\" size=\"sm\" className={className} disabled={disabled || loading} asChild>\n            <Link href={href}>\n                <PencilIcon className=\"size-4\" />\n                {suffix && <span >{suffix}</span>}\n            </Link>\n        </Button>\n    )\n}\n\nexport {\n    DataCreateLink,\n    DataBackLink,\n    DataEditLink,\n    DataRefreshButton,\n    DataShowLink,\n}\n",
      "type": "registry:component"
    }
  ]
}