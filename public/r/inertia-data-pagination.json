{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "inertia-data-pagination",
  "type": "registry:component",
  "title": "Inertia Data Pagination",
  "description": "A simple data pagination component",
  "dependencies": [
    "@inertiajs/react"
  ],
  "registryDependencies": [
    "button",
    "select"
  ],
  "files": [
    {
      "path": "botio/registry/new-york/inertia/data-pagination.tsx",
      "content": "import { router } from \"@inertiajs/react\";\nimport { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight } from \"lucide-react\";\nimport { useMemo } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface DataPaginationProps {\n    page: number;\n    pageSize: number;\n    totalPages: number;\n    totalEntries: number;\n    maxEntries?: number;\n    only?: string[];\n}\n\nconst PAGE_SIZE_OPTIONS = [10, 25, 50, 100]\n\nfunction DataPagination({ page, pageSize, totalPages, totalEntries, maxEntries, only = [] }: DataPaginationProps) {\n    const currentPageSize = useMemo(() => {\n        return PAGE_SIZE_OPTIONS.includes(pageSize) ? pageSize : PAGE_SIZE_OPTIONS[0]\n    }, [pageSize])\n\n    function handlePageChange(page: number, pageSize?: number) {\n        const currentQuery = new URLSearchParams(location.search)\n        const query = Object.fromEntries(currentQuery.entries())\n        query.page = page.toString()\n\n        if (pageSize) {\n            query.per_page = pageSize.toString()\n        }\n\n        router.get(location.pathname as string, query, {\n            preserveState: true,\n            replace: true,\n            only,\n        })\n    }\n\n    return (\n        <div className=\"flex flex-col md:flex-row items-center justify-between gap-2 py-4\">\n            <p className=\"text-sm\">\n                Total de registros: {totalEntries}{\" \"}\n                {maxEntries && `/${maxEntries}`}\n            </p>\n            <div className=\"flex items-center flex-col md:flex-row gap-4\">\n                <div className=\"flex items-center gap-2\">\n                    <span className=\"text-sm\">Mostrar</span>\n                    <Select value={currentPageSize.toString()} onValueChange={(value: string) => handlePageChange(page, parseInt(value))}>\n                        <SelectTrigger className=\"w-fit h-8\">\n                            <SelectValue placeholder=\"Seleccionar\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                            {PAGE_SIZE_OPTIONS.map((option) => (\n                                <SelectItem key={option} value={option.toString()}>\n                                    {option}\n                                </SelectItem>\n                            ))}\n                        </SelectContent>\n                    </Select>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                    <p className=\"text-sm\">\n                        PÃ¡gina {page}/{totalPages}\n                    </p>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                    <Button\n                        onClick={() => handlePageChange(1)}\n                        disabled={page === 1}\n                        variant=\"outline\"\n                        size=\"icon\"\n                        className=\"size-8\"\n                    >\n                        <ChevronsLeft className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                        onClick={() => handlePageChange(page - 1)}\n                        disabled={page === 1}\n                        variant=\"outline\"\n                        size=\"icon\"\n                        className=\"size-8\"\n                    >\n                        <ChevronLeft className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                        onClick={() => handlePageChange(page + 1)}\n                        disabled={page === totalPages}\n                        variant=\"outline\"\n                        size=\"icon\"\n                        className=\"size-8\"\n                    >\n                        <ChevronRight className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                        onClick={() => handlePageChange(totalPages)}\n                        disabled={page === totalPages}\n                        variant=\"outline\"\n                        size=\"icon\"\n                        className=\"size-8\"\n                    >\n                        <ChevronsRight className=\"w-4 h-4\" />\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport { DataPagination, type DataPaginationProps }\n",
      "type": "registry:component"
    }
  ]
}