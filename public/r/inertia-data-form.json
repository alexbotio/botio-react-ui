{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "inertia-data-form",
  "type": "registry:component",
  "title": "Inertia Data Form",
  "description": "A simple data form component",
  "dependencies": [
    "@inertiajs/react",
    "react-use"
  ],
  "registryDependencies": [
    "button",
    "card",
    "label",
    "input",
    "select",
    "checkbox",
    "radio-group",
    "badge",
    "@botio/inertia-data-form-context",
    "@botio/shared-loading-screen"
  ],
  "files": [
    {
      "path": "botio/registry/new-york/inertia/data-form.tsx",
      "content": "import { HTMLAttributes, useCallback, useId, useMemo } from \"react\"\nimport {\n  DataFormContainerProvider,\n  DataFormProvider,\n  useDataFormContainerContext,\n  useDataFormContext,\n  DataFormContainerAction,\n  FormDataType,\n  DataFormFieldProvider,\n  useDataFormFieldContext,\n  DataFormAction\n} from \"./data-form-context\"\nimport { InertiaFormProps, useForm } from \"@inertiajs/react\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { Button } from \"@/components/ui/button\"\nimport { Loader2Icon } from \"lucide-react\"\nimport LoadingScreen from \"@/components/botio/shared/loading-screen\"\nimport { Input } from \"@/components/ui/input\"\nimport { FormDataErrors } from \"@inertiajs/core\"\n\ninterface DataFormContainerProps {\n  children?: React.ReactNode\n  action?: DataFormContainerAction\n  className?: string\n}\n\nfunction DataFormContainer({ children, action = DataFormAction.Read, className, ...props }: DataFormContainerProps) {\n  return (\n    <DataFormContainerProvider action={action}>\n      <div className={cn('w-full max-w-4xl mx-auto p-6', className)} {...props}>{children}</div>\n    </DataFormContainerProvider>\n  )\n}\n\ninterface UseDataFormReturn<T extends FormDataType<object>> {\n  form: InertiaFormProps<T>\n  reading: boolean\n  creating: boolean\n  updating: boolean\n}\n\nfunction useDataForm<T extends FormDataType<T>>(initialValues: T): UseDataFormReturn<T> {\n  const form = useForm<T>(initialValues)\n  const { action } = useDataFormContainerContext()\n  const reading = useMemo(() => action === \"read\", [action])\n  const creating = useMemo(() => action === \"create\", [action])\n  const updating = useMemo(() => action === \"update\", [action])\n\n  return { form, reading, creating, updating }\n}\n\ninterface DataFormProps {\n  children?: React.ReactNode\n  form: InertiaFormProps<object>\n  onFormSubmit: (e?: React.FormEvent<HTMLFormElement>) => void\n}\n\nfunction DataForm({ children, form, onFormSubmit }: DataFormProps) {\n  const handleSubmit = useCallback((e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    onFormSubmit(e)\n  }, [onFormSubmit])\n\n  return (\n    <DataFormProvider form={form}>\n      <form className=\"space-y-4\" onSubmit={handleSubmit}>\n        {children}\n      </form>\n    </DataFormProvider>\n  )\n}\n\ninterface DataFormCardProps extends React.ComponentProps<typeof Card> {\n  children: React.ReactNode\n  title?: string\n  description?: string\n}\n\nfunction DataFormCard({ children, className, title, description, ...props }: DataFormCardProps) {\n  return (\n    <Card data-slot=\"data-form-card\" className={cn(\"grid grid-cols-1\", className)} {...props}>\n      {title && <CardHeader>\n        <CardTitle>{title}</CardTitle>\n        {description && <CardDescription>{description}</CardDescription>}\n      </CardHeader>}\n      <CardContent className=\"space-y-4\">\n        {children}\n      </CardContent>\n    </Card>\n  )\n}\n\ninterface DataFormGroupProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nfunction DataFormGroup({ children, className, ...props }: DataFormGroupProps) {\n  return <div className={cn('grid grid-cols-1 md:grid-cols-2 gap-4', className)} {...props}>{children}</div>;\n}\n\ninterface DataFormFieldProps {\n  name?: string\n  children: React.ReactNode\n  className?: string\n  fullWidth?: boolean\n}\n\nfunction DataFormField({ name, children, className, fullWidth = false, ...props }: DataFormFieldProps) {\n  const id = useId()\n  return (\n    <DataFormFieldProvider name={name ?? id}>\n      <div data-slot=\"data-form-field\" className={cn(\"grid grid-cols-1 gap-2 place-content-start\", fullWidth && \"col-span-full\", className)} {...props}>\n        {children}\n      </div>\n    </DataFormFieldProvider>\n  )\n}\n\nfunction DataFormLabel({ children, required = false }: { children: React.ReactNode, required?: boolean }) {\n  const { action } = useDataFormContainerContext()\n  const { name } = useDataFormFieldContext()\n  return (\n    <Label data-slot=\"data-form-label\" htmlFor={name} className=\"font-bold gap-0 min-h-4 flex items-start\">\n      {children}\n      {action !== DataFormAction.Read && (required ? <span>*</span> : <span className=\"ms-1 text-slate-400 text-xs font-normal\">(Opcional)</span>)}\n    </Label>\n  )\n}\n\ninterface DataFormControlProps extends React.ComponentProps<typeof Slot> {\n  disabled?: boolean\n  autoComplete?: string\n  readingValue?: unknown,\n  field?: React.ReactElement,\n  onChange?: (value: unknown, e?: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nfunction DataFormControl<C extends React.ElementType>({ readingValue, field, ...props }: DataFormControlProps & React.ComponentProps<C> & { field?: React.ReactElement }) {\n  const { action } = useDataFormContainerContext()\n  const { name } = useDataFormFieldContext()\n\n  if (action === \"read\" && readingValue) {\n    return (\n        <Input\n            data-slot=\"data-form-control\"\n            data-action={action}\n            defaultValue={readingValue as string}\n            disabled\n            className={cn(props.className, \"data-[action=read]:opacity-100\")}\n        />\n    )\n  }\n\n  return (\n    <Slot\n      data-slot=\"data-form-control\"\n      data-action={action}\n      name={name}\n      {...props}\n      id={name}\n      className={cn(props.className, \"data-[action=read]:opacity-100\")}\n      disabled={action === \"read\" || props.disabled}\n      autoComplete={props.autoComplete ?? \"off\"}\n    >\n      {field}\n    </Slot>\n  )\n}\n\ninterface DataFormErrorProps extends HTMLAttributes<HTMLParagraphElement> {\n  message?: string\n}\n\nfunction DataFormError({ message, className = \"\", ...props }: DataFormErrorProps) {\n  const { form } = useDataFormContext()\n  const { name } = useDataFormFieldContext()\n  const error = useMemo(() => {\n    return form.errors[name as keyof FormDataErrors<object>]\n  }, [form.errors, name])\n\n  return (\n    <p {...props} className={cn(\"text-sm text-destructive\", className)}>\n      {message ?? error}\n    </p>\n  )\n}\n\ninterface DataFormSubmitProps extends React.ComponentProps<typeof Button> {\n  processing?: boolean\n  showLoadingScreen?: boolean\n}\n\nfunction DataFormSubmit({ children, processing, showLoadingScreen = false, ...props }: DataFormSubmitProps) {\n  const { action } = useDataFormContainerContext()\n  const { form } = useDataFormContext()\n  const buttonText = useMemo(() => action === \"create\" ? \"Guardar\" : \"Actualizar\", [action])\n\n  if (action === \"read\") return null\n\n  return (\n    <>\n      <div className=\"col-span-full\">\n        <Button data-slot=\"data-form-submit\" type=\"submit\" disabled={processing || form.processing} className={cn(\"col-span-full\", props.className)} {...props}>\n          {processing ? <Loader2Icon className=\"mr-2 h-4 w-4 animate-spin\" /> : null}\n          {children ? children : buttonText}\n        </Button>\n      </div>\n      {showLoadingScreen && <LoadingScreen loading={processing || form.processing} message=\"Procesando...\" />}\n    </>\n  )\n}\n\ninterface DataFormHelperProps extends HTMLAttributes<HTMLParagraphElement> {\n  message?: string\n}\n\nfunction DataFormHelper({ children, message, className = \"\", ...props }: DataFormHelperProps) {\n  return (\n    <p {...props} className={cn(\"text-sm text-muted-foreground\", className)}>\n      {message ?? children}\n    </p>\n  )\n}\n\ninterface DataFormSubGroupProps {\n  children?: React.ReactNode;\n  className?: string;\n}\n\nfunction DataFormSubGroup({ children, className, ...props }: DataFormSubGroupProps) {\n  return <div className={cn(\"border border-border border-dashed rounded-md p-4 space-y-2\", className)} {...props}>{children}</div>;\n}\n\ninterface DataFormComponent<TValues extends object, T extends Record<string, unknown>> extends Omit<React.ComponentProps<typeof DataForm>, 'form' | 'onFormSubmit'> {\n    data: T;\n    onFormSubmit?: (form: InertiaFormProps<TValues>, e?: React.FormEvent<HTMLFormElement>) => void;\n}\n\nexport {\n  DataFormContainer,\n  DataForm,\n  DataFormCard,\n  DataFormGroup,\n  DataFormField,\n  DataFormLabel,\n  DataFormControl,\n  DataFormError,\n  DataFormSubmit,\n  DataFormHelper,\n  DataFormSubGroup,\n  useDataForm,\n  DataFormAction,\n}\n\nexport type {\n  FormDataType,\n  DataFormComponent,\n  UseDataFormReturn,\n}\n",
      "type": "registry:component"
    }
  ]
}