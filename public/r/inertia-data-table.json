{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "inertia-data-table",
  "type": "registry:component",
  "title": "Inertia Data Table",
  "description": "A simple data table component",
  "dependencies": [
    "@tanstack/react-table"
  ],
  "registryDependencies": [
    "table",
    "@botio/inertia-data-pagination"
  ],
  "files": [
    {
      "path": "botio/registry/new-york/inertia/data-table.tsx",
      "content": "import * as React from \"react\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\"\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\nimport { DataPagination } from \"./data-pagination\"\nimport { cn } from \"@/lib/utils\"\n\ninterface DataResponse<T> {\n  data: T[]\n  current_page: number\n  per_page: number\n  last_page: number\n  total: number\n}\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data?: TData[] | DataResponse<unknown>,\n  noResultsMessage?: string\n  only?: string[]\n}\n\nfunction DataTable<TData, TValue>({\n  columns,\n  data,\n  noResultsMessage = \"No hay resultados\",\n  only = [],\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([])\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  )\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({})\n  const [rowSelection, setRowSelection] = React.useState({})\n  const dataArray = React.useMemo(() => {\n    return (Array.isArray(data) ? data : data?.data ?? []) as TData[]\n  }, [data])\n\n  const table = useReactTable({\n    data: dataArray,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n  })\n\n  return (\n    <div>\n      <div className=\"overflow-hidden rounded-md border\">\n        <Table>\n            <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n                <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                    return (\n                    <TableHead key={header.id}>\n                        {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                            )}\n                    </TableHead>\n                    )\n                })}\n                </TableRow>\n            ))}\n            </TableHeader>\n            <TableBody>\n            {table.getRowModel().rows?.length ? (\n                table.getRowModel().rows.map((row) => (\n                <TableRow\n                    key={row.id}\n                    data-state={row.getIsSelected() && \"selected\"}\n                >\n                    {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                    ))}\n                </TableRow>\n                ))\n            ) : (\n                <TableRow>\n                <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                    {noResultsMessage}\n                </TableCell>\n                </TableRow>\n            )}\n            </TableBody>\n        </Table>\n      </div>\n      {data && 'current_page' in data && (\n        <DataPagination\n            page={data.current_page}\n            pageSize={data.per_page}\n            totalPages={data.last_page}\n            totalEntries={data.total}\n            only={only}\n        />\n      )}\n    </div>\n  )\n}\n\ninterface DataTableActionsProps extends React.HTMLAttributes<HTMLDivElement> {\n    children?: React.ReactNode\n}\n\nfunction DataTableActions({ children, className, ...props }: DataTableActionsProps) {\n    return (\n        <div className={cn(\"flex items-center justify-end gap-1\", className)} {...props}>\n            {children}\n        </div>\n    )\n}\n\nexport {\n  DataTable,\n  DataTableActions,\n  type DataTableProps,\n  type DataResponse,\n}\n",
      "type": "registry:component"
    }
  ]
}