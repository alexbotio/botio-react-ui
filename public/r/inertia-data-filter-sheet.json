{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "inertia-data-filter-sheet",
  "type": "registry:component",
  "title": "Inertia Data Filter Sheet",
  "description": "A simple data filter sheet component",
  "dependencies": [
    "@inertiajs/react",
    "react-use"
  ],
  "registryDependencies": [
    "button",
    "sheet",
    "use-mobile",
    "label",
    "input",
    "select",
    "checkbox",
    "radio-group",
    "badge"
  ],
  "files": [
    {
      "path": "botio/registry/new-york/inertia/data-filter-sheet.tsx",
      "content": "import React, { useMemo, useEffect, useState } from \"react\"\nimport {\n    Sheet,\n    SheetClose,\n    SheetContent,\n    SheetDescription,\n    SheetFooter,\n    SheetHeader,\n    SheetTitle,\n    SheetTrigger,\n} from \"@/components/ui/sheet\"\nimport { Filter, Loader2, X } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { router } from \"@inertiajs/react\"\nimport { useLocation } from \"react-use\"\nimport { Label } from \"@/components/ui/label\"\nimport { Input } from \"@/components/ui/input\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { useIsMobile } from \"@/hooks/use-mobile\"\n\ninterface DataFilterFields {\n    type: 'input' | 'select' | 'checkbox' | 'radio'\n    name: string\n    label: string\n    placeholder?: string\n    inputType?: 'text' | 'email' | 'number' | 'date' | 'search'\n    options?: {\n        value: string\n        label: string\n    }[]\n    optionsUrl?: string | null\n    optionsKey?: string\n    optionsValue?: string\n    defaultValue?: string | boolean\n    required?: boolean\n    only?: string[]\n    prop?: string\n}\n\ninterface DataFilterSheetProps {\n    children?: React.ReactNode\n    only: string[]\n    fields: DataFilterFields[]\n    onOpenChange?: (open: boolean) => void\n    title?: string\n    description?: string\n    showActiveFilters?: boolean\n    clearFiltersText?: string\n    applyText?: string\n    cancelText?: string\n}\n\nfunction DataFilterField({\n    field,\n    value,\n    onChange\n}: {\n    field: DataFilterFields\n    value?: string | boolean\n    onChange: (name: string, value: string | boolean) => void\n}) {\n    const [data, setData] = useState<{ [key: string]: string }[]>([])\n    const [error, setError] = useState<string | null>(null)\n    const [isLoading, setIsLoading] = useState<boolean>(false)\n    // const { data = [], error, isLoading } = useFetcher(field.optionsUrl as string | null)\n\n    const options = useMemo(() => {\n        if (field.options) {\n            return field.options\n        }\n        return (data as { [key: string]: string }[]).map((item) => ({\n            value: item[field.optionsKey || 'id'],\n            label: item[field.optionsValue || 'name']\n        }))\n    }, [data, field.options, field.optionsKey, field.optionsValue])\n\n    useEffect(() => {\n        if (field.optionsUrl) {\n            setIsLoading(true)\n            const only = field?.only ? field.only : []\n            const prop = field?.prop ? [field.prop] : []\n            router.visit(field.optionsUrl as string, {\n                method: 'get',\n                preserveState: true,\n                preserveScroll: true,\n                preserveUrl: true,\n                only: [...only, ...prop],\n                onSuccess: (page) => {\n                    if (field.prop) {\n                        setData(page.props[field.prop] as { [key: string]: string }[])\n                    }\n                    setError(null)\n                    setIsLoading(false)\n                },\n                onError: (error) => {\n                    setError(error.message)\n                    setIsLoading(false)\n                }\n            })\n        }\n    }, [field.optionsUrl, field.only, field.prop])\n\n    if (field.optionsUrl && error) {\n        return (\n            <div className=\"flex flex-col gap-2\">\n                <Label htmlFor={field.name}>{field.label}</Label>\n                <div className=\"text-sm text-red-500\">Error al cargar opciones</div>\n            </div>\n        )\n    }\n\n    if (field.optionsUrl && isLoading) {\n        return (\n            <div className=\"flex flex-col gap-2\">\n                <Label htmlFor={field.name}>{field.label}</Label>\n                <div className=\"flex items-center gap-2\">\n                    <Loader2 className=\"size-4 animate-spin\" />\n                    <span className=\"text-sm text-muted-foreground\">Cargando...</span>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"flex flex-col gap-2\">\n            <Label htmlFor={field.name}>\n                {field.label}\n                {field.required && <span className=\"text-red-500 ml-1\">*</span>}\n            </Label>\n\n            {field.type === 'input' && (\n                <Input\n                    type={field.inputType || 'text'}\n                    name={field.name}\n                    id={field.name}\n                    placeholder={field.placeholder}\n                    value={value as string || ''}\n                    onChange={(e) => {\n                        onChange(field.name, e.target.value)\n                    }}\n                />\n            )}\n\n            {field.type === 'select' && (\n                <Select\n                    name={field.name}\n                    value={value as string || ''}\n                    onValueChange={(val: string) => {\n                        onChange(field.name, val)\n                    }}\n                >\n                    <SelectTrigger id={field.name}>\n                        <SelectValue placeholder={field.placeholder || \"Selecciona una opción\"} />\n                    </SelectTrigger>\n                    <SelectContent>\n                        {options.map((option) => (\n                            <SelectItem key={option.value} value={option.value.toString()}>\n                                {option.label}\n                            </SelectItem>\n                        ))}\n                    </SelectContent>\n                </Select>\n            )}\n\n            {field.type === 'checkbox' && (\n                <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                        id={field.name}\n                        name={field.name}\n                        checked={typeof value === 'boolean' ? value : false}\n                        onCheckedChange={(checked) => onChange(field.name, checked as boolean)}\n                    />\n                    <Label htmlFor={field.name} className=\"text-sm font-normal\">\n                        {field.label}\n                    </Label>\n                </div>\n            )}\n\n            {field.type === 'radio' && (\n                <RadioGroup\n                    name={field.name}\n                    value={value as string || ''}\n                    onValueChange={(val: string) => onChange(field.name, val)}\n                >\n                    {options.map((option) => (\n                        <div key={option.value} className=\"flex items-center space-x-2\">\n                            <RadioGroupItem value={option.value} id={`${field.name}-${option.value}`} />\n                            <Label htmlFor={`${field.name}-${option.value}`} className=\"text-sm font-normal\">\n                                {option.label}\n                            </Label>\n                        </div>\n                    ))}\n                </RadioGroup>\n            )}\n        </div>\n    )\n}\n\nfunction DataFilterSheet({\n    children,\n    only,\n    fields,\n    onOpenChange,\n    title = \"Filtros\",\n    description = \"Da click en el botón \\\"Aplicar\\\" para filtrar los datos\",\n    showActiveFilters = true,\n    clearFiltersText = \"Limpiar\",\n    applyText = \"Aplicar\",\n    cancelText = \"Cancelar\"\n}: DataFilterSheetProps) {\n    const [isOpen, setIsOpen] = React.useState(false)\n    const [isFiltering, setIsFiltering] = React.useState(false)\n    const [formValues, setFormValues] = React.useState<Record<string, string | boolean>>({})\n    const formId = React.useId()\n    const formRef = React.useRef<HTMLFormElement>(null)\n    const location = useLocation()\n    const isMobile = useIsMobile()\n\n    // Extraer valores iniciales de la URL\n    useEffect(() => {\n        const urlParams = new URLSearchParams(location.search || '')\n        const initialValues: Record<string, string | boolean> = {}\n\n        fields.forEach(field => {\n            const filterKey = `filter_${field.name}`\n            const urlValue = urlParams.get(filterKey)\n\n            if (urlValue !== null) {\n                if (field.type === 'checkbox') {\n                    initialValues[field.name] = urlValue === 'true' || urlValue === '1'\n                } else {\n                    initialValues[field.name] = urlValue\n                }\n            } else if (field.defaultValue !== undefined) {\n                initialValues[field.name] = field.defaultValue\n            } else {\n                // Establecer valores vacíos para campos sin valor\n                if (field.type === 'checkbox') {\n                    initialValues[field.name] = false\n                } else {\n                    initialValues[field.name] = ''\n                }\n            }\n        })\n\n        setFormValues(initialValues)\n    }, [location.search, fields])\n\n    const handleFieldChange = (name: string, value: string | boolean) => {\n        setFormValues(prev => ({\n            ...prev,\n            [name]: value\n        }))\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        setIsFiltering(true)\n\n        const filters: Record<string, string> = {}\n        const currentQuery = new URLSearchParams(location.search)\n        const query = Object.fromEntries(currentQuery.entries())\n\n        delete query.page\n        delete query.per_page\n\n        for (const [key, value] of Object.entries(formValues)) {\n            if (value !== '' && value !== false && value !== null && value !== undefined) {\n                filters[`filter_${key}`] = String(value)\n            }\n        }\n\n        router.get(location.pathname || \"/\", { ...query, ...filters }, {\n            only: only,\n            preserveState: true,\n            onFinish: () => {\n                setIsFiltering(false)\n                setIsOpen(false)\n            },\n        })\n    }\n\n    const handleClearFilters = () => {\n        setFormValues({})\n        const filters: Record<string, string> = {}\n\n        router.get(location.pathname || \"/\", filters, {\n            only: only,\n            preserveState: true,\n            onFinish: () => {\n                setIsFiltering(false)\n                handleOpenChange(false)\n            },\n        })\n    }\n\n    const handleOpenChange = (open: boolean) => {\n        setIsOpen(open)\n        onOpenChange?.(open)\n    }\n\n    // Contar filtros activos\n    const activeFiltersCount = Object.values(formValues).filter(\n        value => value !== '' && value !== false && value !== null && value !== undefined\n    ).length\n\n    return (\n        <Sheet open={isOpen} onOpenChange={handleOpenChange}>\n            <SheetTrigger asChild>\n                {children || (\n                    <Button type=\"button\" variant=\"secondary\" className=\"flex items-center gap-2\">\n                        <Filter className=\"size-4\" />\n                        {isMobile ? '' : 'Filtros'}\n                        {showActiveFilters && activeFiltersCount > 0 && (\n                            <Badge variant=\"secondary\" className=\"ml-1\">\n                                {activeFiltersCount}\n                            </Badge>\n                        )}\n                    </Button>\n                )}\n            </SheetTrigger>\n            <SheetContent className=\"w-[calc(100vw-2rem)] sm:w-[540px]\">\n                <SheetHeader>\n                    <SheetTitle>{title}</SheetTitle>\n                    <SheetDescription>\n                        {description}\n                    </SheetDescription>\n                </SheetHeader>\n\n                <div className=\"flex flex-col gap-4 px-4 py-4\">\n                    {isOpen && (\n                        <form ref={formRef} id={formId} onSubmit={handleSubmit} className=\"flex flex-col gap-4\">\n                            {fields.map((field) => (\n                                <DataFilterField\n                                    key={field.name}\n                                    field={field}\n                                    value={formValues[field.name]}\n                                    onChange={handleFieldChange}\n                                />\n                            ))}\n                        </form>\n                    )}\n                </div>\n\n                <SheetFooter className=\"flex gap-2\">\n                    <Button\n                        type=\"submit\"\n                        form={formId}\n                        disabled={isFiltering}\n                        className=\"flex items-center gap-2\"\n                    >\n                        {isFiltering ? <Loader2 className=\"size-4 animate-spin\" /> : applyText}\n                    </Button>\n                    {activeFiltersCount > 0 && (\n                        <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={handleClearFilters}\n                            disabled={isFiltering}\n                            className=\"flex items-center gap-2\"\n                        >\n                            <X className=\"size-4\" />\n                            {clearFiltersText}\n                        </Button>\n                    )}\n                    <SheetClose asChild>\n                        <Button variant=\"outline\" type=\"button\">\n                            {cancelText}\n                        </Button>\n                    </SheetClose>\n                </SheetFooter>\n            </SheetContent>\n        </Sheet>\n    )\n}\n\nexport { DataFilterSheet }\nexport type { DataFilterFields, DataFilterSheetProps }\n\n/*\nEjemplo de uso:\n\nimport { DataFilterSheet } from \"@/components/data-filter-sheet\"\n\nconst filterFields = [\n  {\n    type: 'input' as const,\n    name: 'search',\n    label: 'Buscar',\n    placeholder: 'Buscar por nombre...',\n    inputType: 'search'\n  },\n  {\n    type: 'select' as const,\n    name: 'status',\n    label: 'Estado',\n    placeholder: 'Seleccionar estado',\n    options: [\n      { value: 'active', label: 'Activo' },\n      { value: 'inactive', label: 'Inactivo' },\n      { value: 'pending', label: 'Pendiente' }\n    ]\n  },\n  {\n    type: 'radio' as const,\n    name: 'priority',\n    label: 'Prioridad',\n    options: [\n      { value: 'low', label: 'Baja' },\n      { value: 'medium', label: 'Media' },\n      { value: 'high', label: 'Alta' }\n    ],\n    defaultValue: 'medium'\n  },\n  {\n    type: 'select' as const,\n    name: 'category',\n    label: 'Categoría',\n    optionsUrl: '/api/categories',\n    optionsKey: 'id',\n    optionsValue: 'name'\n  },\n  {\n    type: 'checkbox' as const,\n    name: 'featured',\n    label: 'Solo destacados',\n    defaultValue: false\n  },\n  {\n    type: 'input' as const,\n    name: 'date_from',\n    label: 'Fecha desde',\n    inputType: 'date'\n  },\n  {\n    type: 'input' as const,\n    name: 'date_to',\n    label: 'Fecha hasta',\n    inputType: 'date'\n  }\n]\n\nfunction MyComponent() {\n  return (\n    <DataFilterSheet\n      only={['data']}\n      fields={filterFields}\n      title=\"Filtros de productos\"\n      description=\"Filtra los productos según tus criterios\"\n      showActiveFilters={true}\n    />\n  )\n}\n*/\n",
      "type": "registry:component"
    }
  ]
}